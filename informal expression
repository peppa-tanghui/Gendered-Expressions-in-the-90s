import pandas as pd

# Load the file to inspect its contents
file_path = '/mnt/data/2w.xlsx'
df = pd.read_excel(file_path)

# Calculate the average usage of each type of informal expression by gender
average_counts_by_gender = df.groupby('gender')[['short_count', 'spoken_count', 'slang_count', 'closeness_count']].mean()

# Display the resulting DataFrame
print(average_counts_by_gender)

#calculate femaleï¼šmate rate
import pandas as pd

# Load the file to inspect its contents
file_path = '/mnt/data/2w.xlsx'
df = pd.read_excel(file_path)

# Calculate the average usage of each type of informal expression by gender
average_counts_by_gender = df.groupby('gender')[['short_count', 'spoken_count', 'slang_count', 'closeness_count']].mean()

# Calculate the ratio of average usage of each informal expression by gender (female to male)
ratios = average_counts_by_gender.loc['female'] / average_counts_by_gender.loc['male']

# Convert the ratios into a string format "a:b"
ratios_formatted = ratios.apply(lambda x: f"{round(x, 2)}:1")

# Display the resulting ratios
print(ratios_formatted)

#visualization
import pandas as pd
import matplotlib.pyplot as plt

# Load the file to inspect its contents
file_path = '/mnt/data/2w.xlsx'
df = pd.read_excel(file_path)

# Calculate the average usage of each type of informal expression by gender
average_counts_by_gender = df.groupby('gender')[['short_count', 'spoken_count', 'slang_count', 'closeness_count']].mean()

# Re-arrange the data for plotting and create the grouped bar chart
average_counts_by_gender.T.plot(kind='bar', figsize=(10, 6), color=['lightblue', 'lightcoral'])

plt.title('Average Usage of Informal Expressions by Gender')
plt.ylabel('Average Count')
plt.xlabel('Type of Informal Expression')
plt.xticks(rotation=0)
plt.legend(title='Gender')
plt.grid(axis='y')

# Display the plot
plt.show()

from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.combine import SMOTEENN

# Separate features and target variable
X = df[['short_count', 'spoken_count', 'slang_count', 'closeness_count']]
y = df['gender']

# Encode the target variable using LabelEncoder
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# oversampling
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y_encoded)


# Check the data distribution after resampling
from collections import Counter
print("Original dataset:", Counter(y_encoded))
print("Resampled dataset:", Counter(y_resampled))

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns


# Extract the features to be used for clustering
X_specific_features = oversampled_df[['closeness_count', 'slang_count', 'spoken_count', 'short_count']]

# 1. Standardize the features
scaler = StandardScaler()
X_standardized = scaler.fit_transform(X_specific_features)

# 2. Use the elbow method to determine the optimal number of clusters (k)
wcss = []  # Within-cluster sum of squares
for i in range(2, 11):  # Try 2 to 10 cluster centers
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(X_standardized)
    wcss.append(kmeans.inertia_)

# Plot the elbow method graph
plt.figure(figsize=(8, 5))
plt.plot(range(2, 11), wcss, marker='o')
plt.title('Elbow Method to Determine Optimal k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS')
plt.show()

# 3. Perform K-Means clustering (assuming k=4 is chosen from the elbow method graph)
k = 4
kmeans = KMeans(n_clusters=k, random_state=42)
clusters = kmeans.fit_predict(X_standardized)

# 4. Add the clustering results to the dataset
oversampled_df['cluster'] = clusters

# 5. Calculate the proportion of males and females in each cluster
cluster_gender_distribution = oversampled_df.groupby(['cluster', 'gender']).size().unstack().fillna(0)

# 6. View the center values for each cluster
cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
cluster_centers_df = pd.DataFrame(cluster_centers, columns=X_specific_features.columns)

# 7. Visualize the gender distribution in each cluster
plt.figure(figsize=(8, 6))
sns.heatmap(cluster_gender_distribution, annot=True, fmt="d", cmap="YlGnBu")
plt.title('Gender Distribution by Cluster')
plt.xlabel('Gender')
plt.ylabel('Cluster')
plt.show()

# Output the center values of each cluster (representative features)
print(cluster_centers_df)

# Clustering Visualization
import matplotlib.pyplot as plt
import seaborn as sns

# Visualize the distribution of clusters
plt.figure(figsize=(12, 8))

# Use a scatter plot to display the distribution of each cluster, selecting the first two standardized features for visualization
sns.scatterplot(x=X_standardized[:, 0], y=X_standardized[:, 1], hue=clusters, palette="deep", legend="full")
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', label='Centroids')

plt.title(f'K-Means Clustering with {k} Clusters')
plt.xlabel('Feature 1 (Standardized)')
plt.ylabel('Feature 2 (Standardized)')
plt.legend()
plt.show()

